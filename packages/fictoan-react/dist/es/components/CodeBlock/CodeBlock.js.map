{"version":3,"file":"CodeBlock.js","sources":["../../../../../../node_modules/prism-react-renderer/prism/index.js","../../../../../../node_modules/prism-react-renderer/dist/index.js","../../../../src/components/CodeBlock/prismjs-components/prism-java.js","../../../../src/components/CodeBlock/CodeBlock.tsx","../../../../src/components/CodeBlock/prismjs-components/prism-csharp.js","../../../../src/components/CodeBlock/prismjs-components/prism-scala.js","../../../../src/components/CodeBlock/prismjs-components/prism-ruby.js","../../../../src/components/CodeBlock/prismjs-components/prism-http.js"],"sourcesContent":["/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\n/**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */\n\n var Prism = (function () {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\treturn _;\n\n}());\n\nvar prism = Prism;\nPrism.default = Prism;\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nprism.languages.markup = {\n  'comment': {\n    pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n    greedy: true\n  },\n  'prolog': {\n    pattern: /<\\?[\\s\\S]+?\\?>/,\n    greedy: true\n  },\n  'doctype': {\n    // https://www.w3.org/TR/xml/#NT-doctypedecl\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n    greedy: true,\n    inside: {\n      'internal-subset': {\n        pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      'string': {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      'punctuation': /^<!|>$|[[\\]]/,\n      'doctype-tag': /^DOCTYPE/i,\n      'name': /[^\\s<>'\"]+/\n    }\n  },\n  'cdata': {\n    pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n    greedy: true\n  },\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'special-attr': [],\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n        inside: {\n          'punctuation': [{\n            pattern: /^=/,\n            alias: 'attr-equals'\n          }, /\"|'/]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': [{\n    pattern: /&[\\da-z]{1,8};/i,\n    alias: 'named-entity'\n  }, /&#x?[\\da-f]{1,8};/i]\n};\nprism.languages.markup['tag'].inside['attr-value'].inside['entity'] = prism.languages.markup['entity'];\nprism.languages.markup['doctype'].inside['internal-subset'].inside = prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nprism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nObject.defineProperty(prism.languages.markup.tag, 'addAttribute', {\n  /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */\n  value: function (attrName, lang) {\n    prism.languages.markup.tag.inside['special-attr'].push({\n      pattern: RegExp(/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, 'i'),\n      lookbehind: true,\n      inside: {\n        'attr-name': /^[^\\s=]+/,\n        'attr-value': {\n          pattern: /=[\\s\\S]+/,\n          inside: {\n            'value': {\n              pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n              lookbehind: true,\n              alias: [lang, 'language-' + lang],\n              inside: prism.languages[lang]\n            },\n            'punctuation': [{\n              pattern: /^=/,\n              alias: 'attr-equals'\n            }, /\"|'/]\n          }\n        }\n      }\n    });\n  }\n});\nprism.languages.html = prism.languages.markup;\nprism.languages.mathml = prism.languages.markup;\nprism.languages.svg = prism.languages.markup;\nprism.languages.xml = prism.languages.extend('markup', {});\nprism.languages.ssml = prism.languages.xml;\nprism.languages.atom = prism.languages.xml;\nprism.languages.rss = prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var commandAfterHeredoc = {\n    pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n    lookbehind: true,\n    alias: 'punctuation',\n    // this looks reasonably well in all themes\n    inside: null // see below\n\n  };\n  var insideString = {\n    'bash': commandAfterHeredoc,\n    'environment': {\n      pattern: RegExp('\\\\$' + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp('(\\\\{)' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'bash': commandAfterHeredoc\n      }\n    }, // “Normal” string\n    {\n      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n      pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n      pattern: /(^|[^$\\\\])'[^']*'/,\n      lookbehind: true,\n      greedy: true\n    }, {\n      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n      pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        'entity': insideString.entity\n      }\n    }],\n    'environment': {\n      pattern: RegExp('\\\\$?' + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  commandAfterHeredoc.inside = Prism.languages.bash;\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nprism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true,\n    greedy: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'function': /\\b\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nprism.languages.c = prism.languages.extend('clike', {\n  'comment': {\n    pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'string': {\n    // https://en.cppreference.com/w/c/language/string_literal\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n  'function': /\\b[a-z_]\\w*(?=\\s*\\()/i,\n  'number': /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nprism.languages.insertBefore('c', 'string', {\n  'char': {\n    // https://en.cppreference.com/w/c/language/character_constant\n    pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n    greedy: true\n  }\n});\nprism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property',\n    inside: {\n      'string': [{\n        // highlight the path of the include statement as a string\n        pattern: /^(#\\s*include\\s*)<[^>]+>/,\n        lookbehind: true\n      }, prism.languages.c['string']],\n      'char': prism.languages.c['char'],\n      'comment': prism.languages.c['comment'],\n      'macro-name': [{\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n        lookbehind: true\n      }, {\n        pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      }],\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /^(#\\s*)[a-z]+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      'directive-hash': /^#/,\n      'punctuation': /##|\\\\(?=[\\r\\n])/,\n      'expression': {\n        pattern: /\\S[\\s\\S]*/,\n        inside: prism.languages.c\n      }\n    }\n  }\n});\nprism.languages.insertBefore('c', 'function', {\n  // highlight predefined macros as constants\n  'constant': /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\ndelete prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\n(function (Prism) {\n  var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n  var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n    return keyword.source;\n  });\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': [{\n      pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n        return keyword.source;\n      })),\n      lookbehind: true\n    }, // This is intended to capture the class name of method implementations like:\n    //   void foo::bar() const {}\n    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n    // it starts with an uppercase letter. This approximation should give decent results.\n    /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n    //   Foo::~Foo() {}\n    /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n    // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n    /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n    'keyword': keyword,\n    'number': {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n      greedy: true\n    },\n    'operator': />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    'boolean': /\\b(?:false|true)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'module': {\n      // https://en.cppreference.com/w/cpp/language/modules\n      pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' + // header-name\n      /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' + // module name or partition or both\n      /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n        return modName;\n      }) + ')'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'string': /^[<\"][\\s\\S]+/,\n        'operator': /:/,\n        'punctuation': /\\./\n      }\n    },\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'keyword', {\n    'generic-function': {\n      pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n      inside: {\n        'function': /^\\w+/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          alias: 'class-name',\n          inside: Prism.languages.cpp\n        }\n      }\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'operator', {\n    'double-colon': {\n      pattern: /::/,\n      alias: 'punctuation'\n    }\n  });\n  Prism.languages.insertBefore('cpp', 'class-name', {\n    // the base clause is an optional list of parent classes\n    // https://en.cppreference.com/w/cpp/language/class\n    'base-clause': {\n      pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n      lookbehind: true,\n      greedy: true,\n      inside: Prism.languages.extend('cpp', {})\n    }\n  });\n  Prism.languages.insertBefore('inside', 'double-colon', {\n    // All untokenized words that are not namespaces should be class names\n    'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n  }, Prism.languages.cpp['base-clause']);\n})(prism);\n/* \"prismjs/components/prism-css\" */\n\n\n(function (Prism) {\n  var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /^@[\\w-]+/,\n        'selector-function-argument': {\n          pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n          lookbehind: true,\n          alias: 'selector'\n        },\n        'keyword': {\n          pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n          lookbehind: true\n        } // See rest below\n\n      }\n    },\n    'url': {\n      // https://drafts.csswg.org/css-values-3/#urls\n      pattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n      greedy: true,\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/,\n        'string': {\n          pattern: RegExp('^' + string.source + '$'),\n          alias: 'url'\n        }\n      }\n    },\n    'selector': {\n      pattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n      lookbehind: true\n    },\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n      lookbehind: true\n    },\n    'important': /!important\\b/i,\n    'function': {\n      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n      lookbehind: true\n    },\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    markup.tag.addAttribute('style', 'css');\n  }\n})(prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  var selectorInside;\n  Prism.languages.css.selector = {\n    pattern: Prism.languages.css.selector.pattern,\n    lookbehind: true,\n    inside: selectorInside = {\n      'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      'pseudo-class': /:[-\\w]+/,\n      'class': /\\.[-\\w]+/,\n      'id': /#[-\\w]+/,\n      'attribute': {\n        pattern: RegExp('\\\\[(?:[^[\\\\]\"\\']|' + string.source + ')*\\\\]'),\n        greedy: true,\n        inside: {\n          'punctuation': /^\\[|\\]$/,\n          'case-sensitivity': {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: true,\n            alias: 'keyword'\n          },\n          'namespace': {\n            pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n            lookbehind: true,\n            inside: {\n              'punctuation': /\\|$/\n            }\n          },\n          'attr-name': {\n            pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n            lookbehind: true\n          },\n          'attr-value': [string, {\n            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n            lookbehind: true\n          }],\n          'operator': /[|~*^$]?=/\n        }\n      },\n      'n-th': [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: true,\n        inside: {\n          'number': /[\\dn]+/,\n          'operator': /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: true\n      }],\n      'combinator': />|\\+|~|\\|\\|/,\n      // the `tag` token has been existed and removed.\n      // because we can't find a perfect tokenize to match it.\n      // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n      'punctuation': /[(),]/\n    }\n  };\n  Prism.languages.css['atrule'].inside['selector-function-argument'].inside = selectorInside;\n  Prism.languages.insertBefore('css', 'property', {\n    'variable': {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n      lookbehind: true\n    }\n  });\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  Prism.languages.insertBefore('css', 'function', {\n    'operator': {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: true\n    },\n    // CAREFUL!\n    // Previewers and Inline color use hexcode and color.\n    'hexcode': {\n      pattern: /\\B#[\\da-f]{3,8}\\b/i,\n      alias: 'color'\n    },\n    'color': [{\n      pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n      lookbehind: true\n    }, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    // it's important that there is no boundary assertion after the hex digits\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'number': number\n  });\n})(prism);\n/* \"prismjs/components/prism-javascript\" */\n\n\nprism.languages.javascript = prism.languages.extend('clike', {\n  'class-name': [prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|\\})\\s*)catch\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'number': {\n    pattern: RegExp(/(^|[^\\w$])/.source + '(?:' + ( // constant\n    /NaN|Infinity/.source + '|' + // binary integer\n    /0[bB][01]+(?:_[01]+)*n?/.source + '|' + // octal integer\n    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' + // hexadecimal integer\n    /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + '|' + // decimal bigint\n    /\\d+(?:_\\d+)*n/.source + '|' + // decimal number (integer or float) but no bigint\n    /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + ')' + /(?![\\w$])/.source),\n    lookbehind: true\n  },\n  'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nprism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nprism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    // eslint-disable-next-line regexp/no-dupe-characters-character-class\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n    lookbehind: true,\n    greedy: true,\n    inside: {\n      'regex-source': {\n        pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n        lookbehind: true,\n        alias: 'language-regex',\n        inside: prism.languages.regex\n      },\n      'regex-delimiter': /^\\/|\\/$/,\n      'regex-flags': /^[a-z]+$/\n    }\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nprism.languages.insertBefore('javascript', 'string', {\n  'hashbang': {\n    pattern: /^#!.*/,\n    greedy: true,\n    alias: 'comment'\n  },\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\$\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'string-property': {\n    pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n    lookbehind: true,\n    greedy: true,\n    alias: 'property'\n  }\n});\nprism.languages.insertBefore('javascript', 'operator', {\n  'literal-property': {\n    pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n    lookbehind: true,\n    alias: 'property'\n  }\n});\n\nif (prism.languages.markup) {\n  prism.languages.markup.tag.addInlined('script', 'javascript'); // add attribute support for all DOM events.\n  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\n  prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');\n}\n\nprism.languages.js = prism.languages.javascript;\n/* \"prismjs/components/prism-coffeescript\" */\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/;\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        'script': {\n          pattern: /[\\s\\S]+/,\n          alias: 'language-javascript',\n          inside: Prism.languages.javascript\n        }\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(prism);\n/* \"prismjs/components/prism-yaml\" */\n\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/false|true/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(prism);\n/* \"prismjs/components/prism-markdown\" */\n\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern) {\n    pattern = pattern.replace(/<inner>/g, function () {\n      return inner;\n    });\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function () {\n    return tableCell;\n  });\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'front-matter-block': {\n      pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'punctuation': /^---|---$/,\n        'front-matter': {\n          pattern: /\\S+(?:\\s+\\S+)*/,\n          alias: ['yaml', 'language-yaml'],\n          inside: Prism.languages.yaml\n        }\n      }\n    },\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      // eslint-disable-next-line regexp/strict\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'code-snippet': {\n      // `code`\n      // ``code``\n      pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['code', 'keyword']\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'operator': /^!/,\n        'content': {\n          pattern: /(^\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'variable': {\n          pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'url': {\n          pattern: /(^\\]\\()[^\\s)]+/,\n          lookbehind: true\n        },\n        'string': {\n          pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n          lookbehind: true\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          // do some replacements to support C++, C#, and F#\n          var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n          lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n          var alias = 'language-' + lang; // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n    }\n  });\n  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');\n  /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */\n\n  var KNOWN_ENTITY_NAMES = {\n    'amp': '&',\n    'lt': '<',\n    'gt': '>',\n    'quot': '\"'\n  }; // IE 11 doesn't support `String.fromCodePoint`\n\n  var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n  /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */\n\n  function textContent(html) {\n    // remove all tags\n    var text = html.replace(tagPattern, ''); // decode known entities\n\n    text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function (m, code) {\n      code = code.toLowerCase();\n\n      if (code[0] === '#') {\n        var value;\n\n        if (code[1] === 'x') {\n          value = parseInt(code.slice(2), 16);\n        } else {\n          value = Number(code.slice(1));\n        }\n\n        return fromCodePoint(value);\n      } else {\n        var known = KNOWN_ENTITY_NAMES[code];\n\n        if (known) {\n          return known;\n        } // unable to decode\n\n\n        return m;\n      }\n    });\n    return text;\n  }\n\n  Prism.languages.md = Prism.languages.markdown;\n})(prism);\n/* \"prismjs/components/prism-graphql\" */\n\n\nprism.languages.graphql = {\n  'comment': /#.*/,\n  'description': {\n    pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n    greedy: true,\n    alias: 'string',\n    inside: {\n      'language-markdown': {\n        pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n        lookbehind: true,\n        inside: prism.languages.markdown\n      }\n    }\n  },\n  'string': {\n    pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:false|true)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'atom-input': {\n    pattern: /\\b[A-Z]\\w*Input\\b/,\n    alias: 'class-name'\n  },\n  'scalar': /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n  'constant': /\\b[A-Z][A-Z_\\d]*\\b/,\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-mutation': {\n    pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'definition-query': {\n    pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n  'operator': /[!=|&]|\\.{3}/,\n  'property-query': /\\w+(?=\\s*\\()/,\n  'object': /\\w+(?=\\s*\\{)/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'property': /\\w+/\n};\nprism.hooks.add('after-tokenize', function afterTokenizeGraphql(env) {\n  if (env.language !== 'graphql') {\n    return;\n  }\n  /**\n   * get the graphql token stream that we want to customize\n   *\n   * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n   * @type {Token[]}\n   */\n\n\n  var validTokens = env.tokens.filter(function (token) {\n    return typeof token !== 'string' && token.type !== 'comment' && token.type !== 'scalar';\n  });\n  var currentIndex = 0;\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {number} offset\n   * @returns {Token | undefined}\n   */\n\n  function getToken(offset) {\n    return validTokens[currentIndex + offset];\n  }\n  /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {readonly string[]} types\n   * @param {number} [offset=0]\n   * @returns {boolean}\n   */\n\n\n  function isTokenType(types, offset) {\n    offset = offset || 0;\n\n    for (var i = 0; i < types.length; i++) {\n      var token = getToken(i + offset);\n\n      if (!token || token.type !== types[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns the index of the closing bracket to an opening bracket.\n   *\n   * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n   *\n   * If no closing bracket could be found, `-1` will be returned.\n   *\n   * @param {RegExp} open\n   * @param {RegExp} close\n   * @returns {number}\n   */\n\n\n  function findClosingBracket(open, close) {\n    var stackHeight = 1;\n\n    for (var i = currentIndex; i < validTokens.length; i++) {\n      var token = validTokens[i];\n      var content = token.content;\n\n      if (token.type === 'punctuation' && typeof content === 'string') {\n        if (open.test(content)) {\n          stackHeight++;\n        } else if (close.test(content)) {\n          stackHeight--;\n\n          if (stackHeight === 0) {\n            return i;\n          }\n        }\n      }\n    }\n\n    return -1;\n  }\n  /**\n   * Adds an alias to the given token.\n   *\n   * @param {Token} token\n   * @param {string} alias\n   * @returns {void}\n   */\n\n\n  function addAlias(token, alias) {\n    var aliases = token.alias;\n\n    if (!aliases) {\n      token.alias = aliases = [];\n    } else if (!Array.isArray(aliases)) {\n      token.alias = aliases = [aliases];\n    }\n\n    aliases.push(alias);\n  }\n\n  for (; currentIndex < validTokens.length;) {\n    var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n\n    if (startToken.type === 'keyword' && startToken.content === 'mutation') {\n      // any array of the names of all input variables (if any)\n      var inputVariables = [];\n\n      if (isTokenType(['definition-mutation', 'punctuation']) && getToken(1).content === '(') {\n        // definition\n        currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n\n        var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n\n        if (definitionEnd === -1) {\n          continue;\n        } // find all input variables\n\n\n        for (; currentIndex < definitionEnd; currentIndex++) {\n          var t = getToken(0);\n\n          if (t.type === 'variable') {\n            addAlias(t, 'variable-input');\n            inputVariables.push(t.content);\n          }\n        }\n\n        currentIndex = definitionEnd + 1;\n      }\n\n      if (isTokenType(['punctuation', 'property-query']) && getToken(0).content === '{') {\n        currentIndex++; // skip opening bracket\n\n        addAlias(getToken(0), 'property-mutation');\n\n        if (inputVariables.length > 0) {\n          var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n\n          if (mutationEnd === -1) {\n            continue;\n          } // give references to input variables a special alias\n\n\n          for (var i = currentIndex; i < mutationEnd; i++) {\n            var varToken = validTokens[i];\n\n            if (varToken.type === 'variable' && inputVariables.indexOf(varToken.content) >= 0) {\n              addAlias(varToken, 'variable-input');\n            }\n          }\n        }\n      }\n    }\n  }\n});\n/* \"prismjs/components/prism-sql\" */\n\nprism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'identifier': {\n    pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n    greedy: true,\n    lookbehind: true,\n    inside: {\n      'punctuation': /^`|`$/\n    }\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:FALSE|NULL|TRUE)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-js-templates\" */\n\n(function (Prism) {\n  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n  var templateLiteralPattern = templateString.pattern.source;\n  var interpolationObject = templateString.inside['interpolation'];\n  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n  var interpolationPattern = interpolationObject.pattern.source;\n  /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */\n\n  function createTemplate(language, tag) {\n    if (!Prism.languages[language]) {\n      return undefined;\n    }\n\n    return {\n      pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        'embedded-code': {\n          pattern: /[\\s\\S]+/,\n          alias: language\n        }\n      }\n    };\n  }\n\n  Prism.languages.javascript['template-string'] = [// styled-jsx:\n  //   css`a { color: #25F; }`\n  // styled-components:\n  //   styled.h1`color: red;`\n  createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`\n  // div.innerHTML = `<p></p>`\n  createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n  createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n  createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n  createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source), // sql`...`\n  createTemplate('sql', /\\bsql/.source), // vanilla template string\n  templateString].filter(Boolean);\n  /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */\n\n  function getPlaceholder(counter, language) {\n    return '___' + language.toUpperCase() + '_' + counter + '___';\n  }\n  /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */\n\n\n  function tokenizeWithHooks(code, grammar, language) {\n    var env = {\n      code: code,\n      grammar: grammar,\n      language: language\n    };\n    Prism.hooks.run('before-tokenize', env);\n    env.tokens = Prism.tokenize(env.code, env.grammar);\n    Prism.hooks.run('after-tokenize', env);\n    return env.tokens;\n  }\n  /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */\n\n\n  function tokenizeInterpolationExpression(expression) {\n    var tempGrammar = {};\n    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n    /** @type {Array} */\n\n    var tokens = Prism.tokenize(expression, tempGrammar);\n\n    if (tokens.length === 3) {\n      /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */\n      var args = [1, 1];\n      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n      tokens.splice.apply(tokens, args);\n    }\n\n    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n  }\n  /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */\n\n\n  function tokenizeEmbedded(code, grammar, language) {\n    // 1. First filter out all interpolations\n    // because they might be escaped, we need a lookbehind, so we use Prism\n\n    /** @type {(Token|string)[]} */\n    var _tokens = Prism.tokenize(code, {\n      'interpolation': {\n        pattern: RegExp(interpolationPattern),\n        lookbehind: true\n      }\n    }); // replace all interpolations with a placeholder which is not in the code already\n\n\n    var placeholderCounter = 0;\n    /** @type {Object<string, string>} */\n\n    var placeholderMap = {};\n\n    var embeddedCode = _tokens.map(function (token) {\n      if (typeof token === 'string') {\n        return token;\n      } else {\n        var interpolationExpression = token.content;\n        var placeholder;\n\n        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {\n          /* noop */\n        }\n\n        placeholderMap[placeholder] = interpolationExpression;\n        return placeholder;\n      }\n    }).join(''); // 2. Tokenize the embedded code\n\n\n    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n    var placeholders = Object.keys(placeholderMap);\n    placeholderCounter = 0;\n    /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */\n\n    function walkTokens(tokens) {\n      for (var i = 0; i < tokens.length; i++) {\n        if (placeholderCounter >= placeholders.length) {\n          return;\n        }\n\n        var token = tokens[i];\n\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          var placeholder = placeholders[placeholderCounter];\n          var s = typeof token === 'string' ? token :\n          /** @type {string} */\n          token.content;\n          var index = s.indexOf(placeholder);\n\n          if (index !== -1) {\n            ++placeholderCounter;\n            var before = s.substring(0, index);\n            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n            var after = s.substring(index + placeholder.length);\n            var replacement = [];\n\n            if (before) {\n              replacement.push(before);\n            }\n\n            replacement.push(middle);\n\n            if (after) {\n              var afterTokens = [after];\n              walkTokens(afterTokens);\n              replacement.push.apply(replacement, afterTokens);\n            }\n\n            if (typeof token === 'string') {\n              tokens.splice.apply(tokens, [i, 1].concat(replacement));\n              i += replacement.length - 1;\n            } else {\n              token.content = replacement;\n            }\n          }\n        } else {\n          var content = token.content;\n\n          if (Array.isArray(content)) {\n            walkTokens(content);\n          } else {\n            walkTokens([content]);\n          }\n        }\n      }\n    }\n\n    walkTokens(embeddedTokens);\n    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n  }\n  /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */\n\n\n  var supportedLanguages = {\n    'javascript': true,\n    'js': true,\n    'typescript': true,\n    'ts': true,\n    'jsx': true,\n    'tsx': true\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (!(env.language in supportedLanguages)) {\n      return;\n    }\n    /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */\n\n\n    function findTemplateStrings(tokens) {\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (typeof token === 'string') {\n          continue;\n        }\n\n        var content = token.content;\n\n        if (!Array.isArray(content)) {\n          if (typeof content !== 'string') {\n            findTemplateStrings([content]);\n          }\n\n          continue;\n        }\n\n        if (token.type === 'template-string') {\n          /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */\n          var embedded = content[1];\n\n          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n            // get string content\n            var code = stringContent(embedded);\n            var alias = embedded.alias;\n            var language = Array.isArray(alias) ? alias[0] : alias;\n            var grammar = Prism.languages[language];\n\n            if (!grammar) {\n              // the embedded language isn't registered.\n              continue;\n            }\n\n            content[1] = tokenizeEmbedded(code, grammar, language);\n          }\n        } else {\n          findTemplateStrings(content);\n        }\n      }\n    }\n\n    findTemplateStrings(env.tokens);\n  });\n  /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */\n\n  function stringContent(value) {\n    if (typeof value === 'string') {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(stringContent).join('');\n    } else {\n      return stringContent(value.content);\n    }\n  }\n})(prism);\n/* \"prismjs/components/prism-typescript\" */\n\n\n(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n  }); // The keywords TypeScript adds to JavaScript\n\n  Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n  /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n  /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter'];\n  delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'decorator': {\n      pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n      inside: {\n        'at': {\n          pattern: /^@/,\n          alias: 'operator'\n        },\n        'function': /^[\\s\\S]+/\n      }\n    },\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function withId(source, flags) {\n    return RegExp(source.replace(/<ID>/g, function () {\n      return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n    }), flags);\n  }\n\n  Prism.languages.insertBefore('javascript', 'keyword', {\n    'imports': {\n      // https://tc39.es/ecma262/#sec-imports\n      pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    },\n    'exports': {\n      // https://tc39.es/ecma262/#sec-exports\n      pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n      lookbehind: true,\n      inside: Prism.languages.javascript\n    }\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n    alias: 'control-flow'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: withId(/(\\.\\s*)#?<ID>/.source),\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(prism);\n/* \"prismjs/components/prism-jsx\" */\n\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n  var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n  var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n  /**\n   * @param {string} source\n   * @param {string} [flags]\n   */\n\n  function re(source, flags) {\n    source = source.replace(/<S>/g, function () {\n      return space;\n    }).replace(/<BRACES>/g, function () {\n      return braces;\n    }).replace(/<SPREAD>/g, function () {\n      return spread;\n    });\n    return RegExp(source, flags);\n  }\n\n  spread = re(spread).source;\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: re(/<SPREAD>/.source),\n      inside: Prism.languages.jsx\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'special-attr', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: re(/=<BRACES>/.source),\n      alias: 'language-javascript',\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?=\\{)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      }\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ; else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === 'diff') {\n      alias.push('bold');\n    }\n\n    Prism.languages.diff[name] = {\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias,\n      inside: {\n        'line': {\n          pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n          lookbehind: true\n        },\n        'prefix': {\n          pattern: /[\\s\\S]/,\n          alias: /\\w+/.exec(name)[0]\n        }\n      }\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(prism);\n/* \"prismjs/components/prism-git\" */\n\n\nprism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit-sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nprism.languages.go = prism.languages.extend('clike', {\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n    lookbehind: true,\n    greedy: true\n  },\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'boolean': /\\b(?:_|false|iota|nil|true)\\b/,\n  'number': [// binary and octal integers\n  /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i, // hexadecimal integers and floats\n  /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i, // decimal integers and floats\n  /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i],\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'builtin': /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n});\nprism.languages.insertBefore('go', 'string', {\n  'char': {\n    pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n    greedy: true\n  }\n});\ndelete prism.languages.go['class-name'];\n/* \"prismjs/components/prism-markup-templating\" */\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-handlebars\" */\n\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'block': {\n      pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n  Prism.languages.hbs = Prism.languages.handlebars;\n})(prism);\n/* \"prismjs/components/prism-json\" */\n// https://www.json.org/json-en.html\n\n\nprism.languages.json = {\n  'property': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string': {\n    pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    lookbehind: true,\n    greedy: true\n  },\n  'comment': {\n    pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    greedy: true\n  },\n  'number': /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\nprism.languages.webmanifest = prism.languages.json;\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nprism.languages.less = prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n  'operator': /[+\\-*\\/]/\n});\nprism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      'punctuation': /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nprism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'builtin-target': {\n    pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n    alias: 'builtin'\n  },\n  'target': {\n    pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n    alias: 'symbol',\n    inside: {\n      'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  // Directives\n  'keyword': /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n  'function': {\n    pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n    lookbehind: true\n  },\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-objectivec\" */\n\nprism.languages.objectivec = prism.languages.extend('c', {\n  'string': {\n    pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n    greedy: true\n  },\n  'keyword': /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete prism.languages.objectivec['class-name'];\nprism.languages.objc = prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */\n// https://ocaml.org/manual/lex.html\n\nprism.languages.ocaml = {\n  'comment': {\n    pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n    greedy: true\n  },\n  'char': {\n    pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n    greedy: true\n  },\n  'string': [{\n    pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n    greedy: true\n  }],\n  'number': [// binary and octal\n  /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n  /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n  /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'property'\n  },\n  'label': {\n    pattern: /\\B~\\w+/,\n    alias: 'property'\n  },\n  'type-variable': {\n    pattern: /\\B'\\w+/,\n    alias: 'function'\n  },\n  'variant': {\n    pattern: /`\\w+/,\n    alias: 'symbol'\n  },\n  // For the list of keywords and operators,\n  // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  'operator-like-punctuation': {\n    pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n    alias: 'punctuation'\n  },\n  // Custom operators are allowed\n  'operator': /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n  'punctuation': /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */\n\nprism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true,\n    greedy: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=\\}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:False|None|True)\\b/,\n  'number': /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n  'operator': /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nprism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = prism.languages.python;\nprism.languages.py = prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nprism.languages.reason = prism.languages.extend('clike', {\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n});\nprism.languages.insertBefore('reason', 'class-name', {\n  'char': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    greedy: true\n  },\n  // Negative look-ahead prevents from matching things like String.capitalize\n  'constructor': /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      greedy: true,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      greedy: true,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      greedy: true,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n      lookbehind: true,\n      greedy: true\n    }\n  });\n})(prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nprism.languages.scss = prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nprism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i, {\n    pattern: /( )(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nprism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nprism.languages.insertBefore('scss', 'function', {\n  'module-modifier': {\n    pattern: /\\b(?:as|hide|show|with)\\b/i,\n    alias: 'keyword'\n  },\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:false|true)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n    lookbehind: true\n  }\n});\nprism.languages.scss['atrule'].inside.rest = prism.languages.scss;\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var unit = {\n    pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n    lookbehind: true\n  }; // 123 -123 .123 -.123 12.3 -12.3\n\n  var number = {\n    pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n    lookbehind: true\n  };\n  var inside = {\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'url': {\n      pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n      greedy: true\n    },\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'color': [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        'unit': unit,\n        'number': number,\n        'function': /[\\w-]+(?=\\()/,\n        'punctuation': /[(),]/\n      }\n    }],\n    'entity': /\\\\[\\da-f]{1,8}/i,\n    'unit': unit,\n    'boolean': /\\b(?:false|true)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'number': number,\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^\\{|\\}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'atrule-declaration': {\n      pattern: /(^[ \\t]*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n      lookbehind: true,\n      inside: {\n        'keyword': /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'comment': inside.comment,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.tsx['parameter'];\n  delete Prism.languages.tsx['literal-property']; // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(prism);\n/* \"prismjs/components/prism-wasm\" */\n\n\nprism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n\nexport default prism;\n","import prism from '../prism/index.js';\nexport { default as Prism } from '../prism/index.js';\nimport theme from '../themes/duotoneDark';\nimport { Component } from 'react';\n\nvar defaultProps = {\n  // $FlowFixMe\n  Prism: prism,\n  theme: theme\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar newlineRe = /\\r\\n|\\r|\\n/; // Empty lines need to contain a single empty token, denoted with { empty: true }\n\nvar normalizeEmptyLines = function (line) {\n  if (line.length === 0) {\n    line.push({\n      types: [\"plain\"],\n      content: \"\\n\",\n      empty: true\n    });\n  } else if (line.length === 1 && line[0].content === \"\") {\n    line[0].content = \"\\n\";\n    line[0].empty = true;\n  }\n};\n\nvar appendTypes = function (types, add) {\n  var typesSize = types.length;\n\n  if (typesSize > 0 && types[typesSize - 1] === add) {\n    return types;\n  }\n\n  return types.concat(add);\n}; // Takes an array of Prism's tokens and groups them by line, turning plain\n// strings into tokens as well. Tokens can become recursive in some cases,\n// which means that their types are concatenated. Plain-string tokens however\n// are always of type \"plain\".\n// This is not recursive to avoid exceeding the call-stack limit, since it's unclear\n// how nested Prism's tokens can become\n\n\nvar normalizeTokens = function (tokens) {\n  var typeArrStack = [[]];\n  var tokenArrStack = [tokens];\n  var tokenArrIndexStack = [0];\n  var tokenArrSizeStack = [tokens.length];\n  var i = 0;\n  var stackIndex = 0;\n  var currentLine = [];\n  var acc = [currentLine];\n\n  while (stackIndex > -1) {\n    while ((i = tokenArrIndexStack[stackIndex]++) < tokenArrSizeStack[stackIndex]) {\n      var content = void 0;\n      var types = typeArrStack[stackIndex];\n      var tokenArr = tokenArrStack[stackIndex];\n      var token = tokenArr[i]; // Determine content and append type to types if necessary\n\n      if (typeof token === \"string\") {\n        types = stackIndex > 0 ? types : [\"plain\"];\n        content = token;\n      } else {\n        types = appendTypes(types, token.type);\n\n        if (token.alias) {\n          types = appendTypes(types, token.alias);\n        }\n\n        content = token.content;\n      } // If token.content is an array, increase the stack depth and repeat this while-loop\n\n\n      if (typeof content !== \"string\") {\n        stackIndex++;\n        typeArrStack.push(types);\n        tokenArrStack.push(content);\n        tokenArrIndexStack.push(0);\n        tokenArrSizeStack.push(content.length);\n        continue;\n      } // Split by newlines\n\n\n      var splitByNewlines = content.split(newlineRe);\n      var newlineCount = splitByNewlines.length;\n      currentLine.push({\n        types: types,\n        content: splitByNewlines[0]\n      }); // Create a new line for each string on a new line\n\n      for (var i$1 = 1; i$1 < newlineCount; i$1++) {\n        normalizeEmptyLines(currentLine);\n        acc.push(currentLine = []);\n        currentLine.push({\n          types: types,\n          content: splitByNewlines[i$1]\n        });\n      }\n    } // Decreate the stack depth\n\n\n    stackIndex--;\n    typeArrStack.pop();\n    tokenArrStack.pop();\n    tokenArrIndexStack.pop();\n    tokenArrSizeStack.pop();\n  }\n\n  normalizeEmptyLines(currentLine);\n  return acc;\n};\n\nvar themeToDict = function (theme, language) {\n  var plain = theme.plain; // $FlowFixMe\n\n  var base = Object.create(null);\n  var themeDict = theme.styles.reduce(function (acc, themeEntry) {\n    var languages = themeEntry.languages;\n    var style = themeEntry.style;\n\n    if (languages && !languages.includes(language)) {\n      return acc;\n    }\n\n    themeEntry.types.forEach(function (type) {\n      // $FlowFixMe\n      var accStyle = _extends({}, acc[type], style);\n\n      acc[type] = accStyle;\n    });\n    return acc;\n  }, base); // $FlowFixMe\n\n  themeDict.root = plain; // $FlowFixMe\n\n  themeDict.plain = _extends({}, plain, {\n    backgroundColor: null\n  });\n  return themeDict;\n};\n\nfunction objectWithoutProperties(obj, exclude) {\n  var target = {};\n\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];\n\n  return target;\n}\n\nvar Highlight = /*@__PURE__*/function (Component) {\n  function Highlight() {\n    var this$1 = this;\n    var args = [],\n        len = arguments.length;\n\n    while (len--) args[len] = arguments[len];\n\n    Component.apply(this, args);\n\n    _defineProperty(this, \"getThemeDict\", function (props) {\n      if (this$1.themeDict !== undefined && props.theme === this$1.prevTheme && props.language === this$1.prevLanguage) {\n        return this$1.themeDict;\n      }\n\n      this$1.prevTheme = props.theme;\n      this$1.prevLanguage = props.language;\n      var themeDict = props.theme ? themeToDict(props.theme, props.language) : undefined;\n      return this$1.themeDict = themeDict;\n    });\n\n    _defineProperty(this, \"getLineProps\", function (ref) {\n      var key = ref.key;\n      var className = ref.className;\n      var style = ref.style;\n      var rest$1 = objectWithoutProperties(ref, [\"key\", \"className\", \"style\", \"line\"]);\n      var rest = rest$1;\n\n      var output = _extends({}, rest, {\n        className: \"token-line\",\n        style: undefined,\n        key: undefined\n      });\n\n      var themeDict = this$1.getThemeDict(this$1.props);\n\n      if (themeDict !== undefined) {\n        output.style = themeDict.plain;\n      }\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) {\n        output.key = key;\n      }\n\n      if (className) {\n        output.className += \" \" + className;\n      }\n\n      return output;\n    });\n\n    _defineProperty(this, \"getStyleForToken\", function (ref) {\n      var types = ref.types;\n      var empty = ref.empty;\n      var typesSize = types.length;\n      var themeDict = this$1.getThemeDict(this$1.props);\n\n      if (themeDict === undefined) {\n        return undefined;\n      } else if (typesSize === 1 && types[0] === \"plain\") {\n        return empty ? {\n          display: \"inline-block\"\n        } : undefined;\n      } else if (typesSize === 1 && !empty) {\n        return themeDict[types[0]];\n      }\n\n      var baseStyle = empty ? {\n        display: \"inline-block\"\n      } : {}; // $FlowFixMe\n\n      var typeStyles = types.map(function (type) {\n        return themeDict[type];\n      });\n      return Object.assign.apply(Object, [baseStyle].concat(typeStyles));\n    });\n\n    _defineProperty(this, \"getTokenProps\", function (ref) {\n      var key = ref.key;\n      var className = ref.className;\n      var style = ref.style;\n      var token = ref.token;\n      var rest$1 = objectWithoutProperties(ref, [\"key\", \"className\", \"style\", \"token\"]);\n      var rest = rest$1;\n\n      var output = _extends({}, rest, {\n        className: \"token \" + token.types.join(\" \"),\n        children: token.content,\n        style: this$1.getStyleForToken(token),\n        key: undefined\n      });\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) {\n        output.key = key;\n      }\n\n      if (className) {\n        output.className += \" \" + className;\n      }\n\n      return output;\n    });\n\n    _defineProperty(this, \"tokenize\", function (Prism, code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language,\n        tokens: []\n      };\n      Prism.hooks.run(\"before-tokenize\", env);\n      var tokens = env.tokens = Prism.tokenize(env.code, env.grammar, env.language);\n      Prism.hooks.run(\"after-tokenize\", env);\n      return tokens;\n    });\n  }\n\n  if (Component) Highlight.__proto__ = Component;\n  Highlight.prototype = Object.create(Component && Component.prototype);\n  Highlight.prototype.constructor = Highlight;\n\n  Highlight.prototype.render = function render() {\n    var ref = this.props;\n    var Prism = ref.Prism;\n    var language = ref.language;\n    var code = ref.code;\n    var children = ref.children;\n    var themeDict = this.getThemeDict(this.props);\n    var grammar = Prism.languages[language];\n    var mixedTokens = grammar !== undefined ? this.tokenize(Prism, code, grammar, language) : [code];\n    var tokens = normalizeTokens(mixedTokens);\n    return children({\n      tokens: tokens,\n      className: \"prism-code language-\" + language,\n      style: themeDict !== undefined ? themeDict.root : {},\n      getLineProps: this.getLineProps,\n      getTokenProps: this.getTokenProps\n    });\n  };\n\n  return Highlight;\n}(Component);\n\nexport default Highlight;\nexport { defaultProps };\n","export const registerLanguage = (Prism) => {\n    // Copied from https://raw.githubusercontent.com/PrismJS/prism/master/components/prism-java.js\n    (function (Prism) {\n        var keywords =\n            /\\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\\b/;\n\n        // full package (optional) + parent classes (optional)\n        var classNamePrefix = /(^|[^\\w.])(?:[a-z]\\w*\\s*\\.\\s*)*(?:[A-Z]\\w*\\s*\\.\\s*)*/.source;\n\n        // based on the java naming conventions\n        var className = {\n            pattern: RegExp(classNamePrefix + /[A-Z](?:[\\d_A-Z]*[a-z]\\w*)?\\b/.source),\n            lookbehind: true,\n            inside: {\n                namespace: {\n                    pattern: /^[a-z]\\w*(?:\\s*\\.\\s*[a-z]\\w*)*(?:\\s*\\.)?/,\n                    inside: {\n                        punctuation: /\\./,\n                    },\n                },\n                punctuation: /\\./,\n            },\n        };\n\n        Prism.languages.java = Prism.languages.extend(\"clike\", {\n            \"class-name\": [\n                className,\n                {\n                    // variables and parameters\n                    // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n                    pattern: RegExp(classNamePrefix + /[A-Z]\\w*(?=\\s+\\w+\\s*[;,=()])/.source),\n                    lookbehind: true,\n                    inside: className.inside,\n                },\n            ],\n            keyword: keywords,\n            function: [\n                Prism.languages.clike.function,\n                {\n                    pattern: /(::\\s*)[a-z_]\\w*/,\n                    lookbehind: true,\n                },\n            ],\n            number: /\\b0b[01][01_]*L?\\b|\\b0x(?:\\.[\\da-f_p+-]+|[\\da-f_]+(?:\\.[\\da-f_p+-]+)?)\\b|(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n            operator: {\n                pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\\+\\+|&&|\\|\\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,\n                lookbehind: true,\n            },\n        });\n\n        Prism.languages.insertBefore(\"java\", \"string\", {\n            \"triple-quoted-string\": {\n                // http://openjdk.java.net/jeps/355#Description\n                pattern: /\"\"\"[ \\t]*[\\r\\n](?:(?:\"|\"\")?(?:\\\\.|[^\"\\\\]))*\"\"\"/,\n                greedy: true,\n                alias: \"string\",\n            },\n        });\n\n        Prism.languages.insertBefore(\"java\", \"class-name\", {\n            annotation: {\n                pattern: /(^|[^.])@\\w+(?:\\s*\\.\\s*\\w+)*/,\n                lookbehind: true,\n                alias: \"punctuation\",\n            },\n            generics: {\n                pattern:\n                    /<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&)|<(?:[\\w\\s,.?]|&(?!&))*>)*>)*>)*>/,\n                inside: {\n                    \"class-name\": className,\n                    keyword: keywords,\n                    punctuation: /[<>(),.:]/,\n                    operator: /[?&|]/,\n                },\n            },\n            namespace: {\n                pattern: RegExp(\n                    /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)(?!<keyword>)[a-z]\\w*(?:\\.[a-z]\\w*)*\\.?/.source.replace(\n                        /<keyword>/g,\n                        function () {\n                            return keywords.source;\n                        }\n                    )\n                ),\n                lookbehind: true,\n                inside: {\n                    punctuation: /\\./,\n                },\n            },\n        });\n    })(Prism);\n};\n","import React from \"react\";\nimport PrismReactRenderer, { Prism, Language } from \"prism-react-renderer\";\n\nimport { registerLanguage as registerJava } from \"./prismjs-components/prism-java\";\nimport { registerLanguage as registerCSharp } from \"./prismjs-components/prism-csharp\";\nimport { registerLanguage as registerScala } from \"./prismjs-components/prism-scala\";\nimport { registerLanguage as registerRuby } from \"./prismjs-components/prism-ruby\";\nimport { registerLanguage as registerHttp } from \"./prismjs-components/prism-http\";\n\nregisterJava(Prism);\nregisterCSharp(Prism);\nregisterScala(Prism);\nregisterRuby(Prism);\nregisterHttp(Prism);\n\nimport { CommonAndHTMLProps } from \"../Element/constants\";\nimport { Element } from \"../Element/Element\";\nimport { CodeStyled } from \"./Code.styled\";\n\n// prettier-ignore\nexport interface CodeBlockCustomProps {\n    source   ? : object | string;\n    language ? : Language;\n}\n\nexport type CodeBlockElementType = HTMLPreElement;\nexport type CodeBlockProps = Omit<CommonAndHTMLProps<CodeBlockElementType>, keyof CodeBlockCustomProps> &\n    CodeBlockCustomProps;\n\nexport const CodeBlock = React.forwardRef(\n    ({ source, ...props }: CodeBlockProps, ref: React.Ref<CodeBlockElementType>) => {\n        return (\n            <Element<CodeBlockElementType> as={CodeStyled} ref={ref} {...props}>\n                <PrismReactRenderer\n                    code={typeof source === \"object\" ? JSON.stringify(source, null, 2) : source}\n                    language=\"json\"\n                    {...props}\n                    Prism={Prism}\n                    theme={undefined}\n                >\n                    {({ className, style, tokens, getLineProps, getTokenProps }) => (\n                        <pre ref={ref} className={className} style={style}>\n                            {tokens.map((line, i) => (\n                                <div {...getLineProps({ line, key: i })}>\n                                    {line.map((token, key) => (\n                                        <span {...getTokenProps({ token, key })} />\n                                    ))}\n                                </div>\n                            ))}\n                        </pre>\n                    )}\n                </PrismReactRenderer>\n            </Element>\n        );\n    }\n);\n","export const registerLanguage = (Prism) => {\n    // Copied from https://raw.githubusercontent.com/PrismJS/prism/master/components/prism-csharp.js\n    (function (Prism) {\n        /**\n         * Replaces all placeholders \"<<n>>\" of given pattern with the n-th replacement (zero based).\n         *\n         * Note: This is a simple text based replacement. Be careful when using backreferences!\n         *\n         * @param {string} pattern the given pattern.\n         * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.\n         * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.\n         * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source\n         */\n        function replace(pattern, replacements) {\n            return pattern.replace(/<<(\\d+)>>/g, function (m, index) {\n                return \"(?:\" + replacements[+index] + \")\";\n            });\n        }\n        /**\n         * @param {string} pattern\n         * @param {string[]} replacements\n         * @param {string} [flags]\n         * @returns {RegExp}\n         */\n        function re(pattern, replacements, flags) {\n            return RegExp(replace(pattern, replacements), flags || \"\");\n        }\n\n        /**\n         * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.\n         *\n         * @param {string} pattern\n         * @param {number} depthLog2\n         * @returns {string}\n         */\n        function nested(pattern, depthLog2) {\n            for (var i = 0; i < depthLog2; i++) {\n                pattern = pattern.replace(/<<self>>/g, function () {\n                    return \"(?:\" + pattern + \")\";\n                });\n            }\n            return pattern.replace(/<<self>>/g, \"[^\\\\s\\\\S]\");\n        }\n\n        // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/\n        var keywordKinds = {\n            // keywords which represent a return or variable type\n            type: \"bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void\",\n            // keywords which are used to declare a type\n            typeDeclaration: \"class enum interface record struct\",\n            // contextual keywords\n            // (\"var\" and \"dynamic\" are missing because they are used like types)\n            contextual:\n                \"add alias and ascending async await by descending from(?=\\\\s*(?:\\\\w|$)) get global group into init(?=\\\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\\\s*{)\",\n            // all other keywords\n            other: \"abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield\",\n        };\n\n        // keywords\n        function keywordsToPattern(words) {\n            return \"\\\\b(?:\" + words.trim().replace(/ /g, \"|\") + \")\\\\b\";\n        }\n        var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);\n        var keywords = RegExp(\n            keywordsToPattern(\n                keywordKinds.type +\n                    \" \" +\n                    keywordKinds.typeDeclaration +\n                    \" \" +\n                    keywordKinds.contextual +\n                    \" \" +\n                    keywordKinds.other\n            )\n        );\n        var nonTypeKeywords = keywordsToPattern(\n            keywordKinds.typeDeclaration + \" \" + keywordKinds.contextual + \" \" + keywordKinds.other\n        );\n        var nonContextualKeywords = keywordsToPattern(\n            keywordKinds.type + \" \" + keywordKinds.typeDeclaration + \" \" + keywordKinds.other\n        );\n\n        // types\n        var generic = nested(/<(?:[^<>;=+\\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.\n        var nestedRound = nested(/\\((?:[^()]|<<self>>)*\\)/.source, 2);\n        var name = /@?\\b[A-Za-z_]\\w*\\b/.source;\n        var genericName = replace(/<<0>>(?:\\s*<<1>>)?/.source, [name, generic]);\n        var identifier = replace(/(?!<<0>>)<<1>>(?:\\s*\\.\\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);\n        var array = /\\[\\s*(?:,\\s*)*\\]/.source;\n        var typeExpressionWithoutTuple = replace(/<<0>>(?:\\s*(?:\\?\\s*)?<<1>>)*(?:\\s*\\?)?/.source, [identifier, array]);\n        var tupleElement = replace(/[^,()<>[\\];=+\\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);\n        var tuple = replace(/\\(<<0>>+(?:,<<0>>+)+\\)/.source, [tupleElement]);\n        var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\\s*(?:\\?\\s*)?<<2>>)*(?:\\s*\\?)?/.source, [\n            tuple,\n            identifier,\n            array,\n        ]);\n\n        var typeInside = {\n            keyword: keywords,\n            punctuation: /[<>()?,.:[\\]]/,\n        };\n\n        // strings & characters\n        // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals\n        // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals\n        var character = /'(?:[^\\r\\n'\\\\]|\\\\.|\\\\[Uux][\\da-fA-F]{1,8})'/.source; // simplified pattern\n        var regularString = /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/.source;\n        var verbatimString = /@\"(?:\"\"|\\\\[\\s\\S]|[^\\\\\"])*\"(?!\")/.source;\n\n        Prism.languages.csharp = Prism.languages.extend(\"clike\", {\n            string: [\n                {\n                    pattern: re(/(^|[^$\\\\])<<0>>/.source, [verbatimString]),\n                    lookbehind: true,\n                    greedy: true,\n                },\n                {\n                    pattern: re(/(^|[^@$\\\\])<<0>>/.source, [regularString]),\n                    lookbehind: true,\n                    greedy: true,\n                },\n                {\n                    pattern: RegExp(character),\n                    greedy: true,\n                    alias: \"character\",\n                },\n            ],\n            \"class-name\": [\n                {\n                    // Using static\n                    // using static System.Math;\n                    pattern: re(/(\\busing\\s+static\\s+)<<0>>(?=\\s*;)/.source, [identifier]),\n                    lookbehind: true,\n                    inside: typeInside,\n                },\n                {\n                    // Using alias (type)\n                    // using Project = PC.MyCompany.Project;\n                    pattern: re(/(\\busing\\s+<<0>>\\s*=\\s*)<<1>>(?=\\s*;)/.source, [name, typeExpression]),\n                    lookbehind: true,\n                    inside: typeInside,\n                },\n                {\n                    // Using alias (alias)\n                    // using Project = PC.MyCompany.Project;\n                    pattern: re(/(\\busing\\s+)<<0>>(?=\\s*=)/.source, [name]),\n                    lookbehind: true,\n                },\n                {\n                    // Type declarations\n                    // class Foo<A, B>\n                    // interface Foo<out A, B>\n                    pattern: re(/(\\b<<0>>\\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),\n                    lookbehind: true,\n                    inside: typeInside,\n                },\n                {\n                    // Single catch exception declaration\n                    // catch(Foo)\n                    // (things like catch(Foo e) is covered by variable declaration)\n                    pattern: re(/(\\bcatch\\s*\\(\\s*)<<0>>/.source, [identifier]),\n                    lookbehind: true,\n                    inside: typeInside,\n                },\n                {\n                    // Name of the type parameter of generic constraints\n                    // where Foo : class\n                    pattern: re(/(\\bwhere\\s+)<<0>>/.source, [name]),\n                    lookbehind: true,\n                },\n                {\n                    // Casts and checks via as and is.\n                    // as Foo<A>, is Bar<B>\n                    // (things like if(a is Foo b) is covered by variable declaration)\n                    pattern: re(/(\\b(?:is(?:\\s+not)?|as)\\s+)<<0>>/.source, [typeExpressionWithoutTuple]),\n                    lookbehind: true,\n                    inside: typeInside,\n                },\n                {\n                    // Variable, field and parameter declaration\n                    // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)\n                    pattern: re(/\\b<<0>>(?=\\s+(?!<<1>>|with\\s*\\{)<<2>>(?:\\s*[=,;:{)\\]]|\\s+(?:in|when)\\b))/.source, [\n                        typeExpression,\n                        nonContextualKeywords,\n                        name,\n                    ]),\n                    inside: typeInside,\n                },\n            ],\n            keyword: keywords,\n            // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals\n            number: /(?:\\b0(?:x[\\da-f_]*[\\da-f]|b[01_]*[01])|(?:\\B\\.\\d+(?:_+\\d+)*|\\b\\d+(?:_+\\d+)*(?:\\.\\d+(?:_+\\d+)*)?)(?:e[-+]?\\d+(?:_+\\d+)*)?)(?:ul|lu|[dflmu])?\\b/i,\n            operator: />>=?|<<=?|[-=]>|([-+&|])\\1|~|\\?\\?=?|[-+*/%&|^!=<>]=?/,\n            punctuation: /\\?\\.?|::|[{}[\\];(),.:]/,\n        });\n\n        Prism.languages.insertBefore(\"csharp\", \"number\", {\n            range: {\n                pattern: /\\.\\./,\n                alias: \"operator\",\n            },\n        });\n\n        Prism.languages.insertBefore(\"csharp\", \"punctuation\", {\n            \"named-parameter\": {\n                pattern: re(/([(,]\\s*)<<0>>(?=\\s*:)/.source, [name]),\n                lookbehind: true,\n                alias: \"punctuation\",\n            },\n        });\n\n        Prism.languages.insertBefore(\"csharp\", \"class-name\", {\n            namespace: {\n                // namespace Foo.Bar {}\n                // using Foo.Bar;\n                pattern: re(/(\\b(?:namespace|using)\\s+)<<0>>(?:\\s*\\.\\s*<<0>>)*(?=\\s*[;{])/.source, [name]),\n                lookbehind: true,\n                inside: {\n                    punctuation: /\\./,\n                },\n            },\n            \"type-expression\": {\n                // default(Foo), typeof(Foo<Bar>), sizeof(int)\n                pattern: re(/(\\b(?:default|typeof|sizeof)\\s*\\(\\s*(?!\\s))(?:[^()\\s]|\\s(?!\\s)|<<0>>)*(?=\\s*\\))/.source, [\n                    nestedRound,\n                ]),\n                lookbehind: true,\n                alias: \"class-name\",\n                inside: typeInside,\n            },\n            \"return-type\": {\n                // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0\n                // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];\n                // int Foo => 0; int Foo { get; set } = 0;\n                pattern: re(/<<0>>(?=\\s+(?:<<1>>\\s*(?:=>|[({]|\\.\\s*this\\s*\\[)|this\\s*\\[))/.source, [\n                    typeExpression,\n                    identifier,\n                ]),\n                inside: typeInside,\n                alias: \"class-name\",\n            },\n            \"constructor-invocation\": {\n                // new List<Foo<Bar[]>> { }\n                pattern: re(/(\\bnew\\s+)<<0>>(?=\\s*[[({])/.source, [typeExpression]),\n                lookbehind: true,\n                inside: typeInside,\n                alias: \"class-name\",\n            },\n            /*'explicit-implementation': {\n                // int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();\n                pattern: replace(/\\b<<0>>(?=\\.<<1>>)/, className, methodOrPropertyDeclaration),\n                inside: classNameInside,\n                alias: 'class-name'\n            },*/\n            \"generic-method\": {\n                // foo<Bar>()\n                pattern: re(/<<0>>\\s*<<1>>(?=\\s*\\()/.source, [name, generic]),\n                inside: {\n                    function: re(/^<<0>>/.source, [name]),\n                    generic: {\n                        pattern: RegExp(generic),\n                        alias: \"class-name\",\n                        inside: typeInside,\n                    },\n                },\n            },\n            \"type-list\": {\n                // The list of types inherited or of generic constraints\n                // class Foo<F> : Bar, IList<FooBar>\n                // where F : Bar, IList<int>\n                pattern: re(\n                    /\\b((?:<<0>>\\s+<<1>>|record\\s+<<1>>\\s*<<5>>|where\\s+<<2>>)\\s*:\\s*)(?:<<3>>|<<4>>|<<1>>\\s*<<5>>|<<6>>)(?:\\s*,\\s*(?:<<3>>|<<4>>|<<6>>))*(?=\\s*(?:where|[{;]|=>|$))/\n                        .source,\n                    [\n                        typeDeclarationKeywords,\n                        genericName,\n                        name,\n                        typeExpression,\n                        keywords.source,\n                        nestedRound,\n                        /\\bnew\\s*\\(\\s*\\)/.source,\n                    ]\n                ),\n                lookbehind: true,\n                inside: {\n                    \"record-arguments\": {\n                        pattern: re(/(^(?!new\\s*\\()<<0>>\\s*)<<1>>/.source, [genericName, nestedRound]),\n                        lookbehind: true,\n                        greedy: true,\n                        inside: Prism.languages.csharp,\n                    },\n                    keyword: keywords,\n                    \"class-name\": {\n                        pattern: RegExp(typeExpression),\n                        greedy: true,\n                        inside: typeInside,\n                    },\n                    punctuation: /[,()]/,\n                },\n            },\n            preprocessor: {\n                pattern: /(^[\\t ]*)#.*/m,\n                lookbehind: true,\n                alias: \"property\",\n                inside: {\n                    // highlight preprocessor directives as keywords\n                    directive: {\n                        pattern:\n                            /(#)\\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\\b/,\n                        lookbehind: true,\n                        alias: \"keyword\",\n                    },\n                },\n            },\n        });\n\n        // attributes\n        var regularStringOrCharacter = regularString + \"|\" + character;\n        var regularStringCharacterOrComment = replace(\n            /\\/(?![*/])|\\/\\/[^\\r\\n]*[\\r\\n]|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>/.source,\n            [regularStringOrCharacter]\n        );\n        var roundExpression = nested(\n            replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]),\n            2\n        );\n\n        // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets\n        var attrTarget = /\\b(?:assembly|event|field|method|module|param|property|return|type)\\b/.source;\n        var attr = replace(/<<0>>(?:\\s*\\(<<1>>*\\))?/.source, [identifier, roundExpression]);\n\n        Prism.languages.insertBefore(\"csharp\", \"class-name\", {\n            attribute: {\n                // Attributes\n                // [Foo], [Foo(1), Bar(2, Prop = \"foo\")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]\n                pattern: re(/((?:^|[^\\s\\w>)?])\\s*\\[\\s*)(?:<<0>>\\s*:\\s*)?<<1>>(?:\\s*,\\s*<<1>>)*(?=\\s*\\])/.source, [\n                    attrTarget,\n                    attr,\n                ]),\n                lookbehind: true,\n                greedy: true,\n                inside: {\n                    target: {\n                        pattern: re(/^<<0>>(?=\\s*:)/.source, [attrTarget]),\n                        alias: \"keyword\",\n                    },\n                    \"attribute-arguments\": {\n                        pattern: re(/\\(<<0>>*\\)/.source, [roundExpression]),\n                        inside: Prism.languages.csharp,\n                    },\n                    \"class-name\": {\n                        pattern: RegExp(identifier),\n                        inside: {\n                            punctuation: /\\./,\n                        },\n                    },\n                    punctuation: /[:,]/,\n                },\n            },\n        });\n\n        // string interpolation\n        var formatString = /:[^}\\r\\n]+/.source;\n        // multi line\n        var mInterpolationRound = nested(\n            replace(/[^\"'/()]|<<0>>|\\(<<self>>*\\)/.source, [regularStringCharacterOrComment]),\n            2\n        );\n        var mInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [mInterpolationRound, formatString]);\n        // single line\n        var sInterpolationRound = nested(\n            replace(/[^\"'/()]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|<<0>>|\\(<<self>>*\\)/.source, [\n                regularStringOrCharacter,\n            ]),\n            2\n        );\n        var sInterpolation = replace(/\\{(?!\\{)(?:(?![}:])<<0>>)*<<1>>?\\}/.source, [sInterpolationRound, formatString]);\n\n        function createInterpolationInside(interpolation, interpolationRound) {\n            return {\n                interpolation: {\n                    pattern: re(/((?:^|[^{])(?:\\{\\{)*)<<0>>/.source, [interpolation]),\n                    lookbehind: true,\n                    inside: {\n                        \"format-string\": {\n                            pattern: re(/(^\\{(?:(?![}:])<<0>>)*)<<1>>(?=\\}$)/.source, [\n                                interpolationRound,\n                                formatString,\n                            ]),\n                            lookbehind: true,\n                            inside: {\n                                punctuation: /^:/,\n                            },\n                        },\n                        punctuation: /^\\{|\\}$/,\n                        expression: {\n                            pattern: /[\\s\\S]+/,\n                            alias: \"language-csharp\",\n                            inside: Prism.languages.csharp,\n                        },\n                    },\n                },\n                string: /[\\s\\S]+/,\n            };\n        }\n\n        Prism.languages.insertBefore(\"csharp\", \"string\", {\n            \"interpolation-string\": [\n                {\n                    pattern: re(/(^|[^\\\\])(?:\\$@|@\\$)\"(?:\"\"|\\\\[\\s\\S]|\\{\\{|<<0>>|[^\\\\{\"])*\"/.source, [mInterpolation]),\n                    lookbehind: true,\n                    greedy: true,\n                    inside: createInterpolationInside(mInterpolation, mInterpolationRound),\n                },\n                {\n                    pattern: re(/(^|[^@\\\\])\\$\"(?:\\\\.|\\{\\{|<<0>>|[^\\\\\"{])*\"/.source, [sInterpolation]),\n                    lookbehind: true,\n                    greedy: true,\n                    inside: createInterpolationInside(sInterpolation, sInterpolationRound),\n                },\n            ],\n        });\n    })(Prism);\n\n    Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;\n};\n","export const registerLanguage = (Prism) => {\n    // Copied from https://raw.githubusercontent.com/PrismJS/prism/master/components/prism-scala.js\n    Prism.languages.scala = Prism.languages.extend(\"java\", {\n        \"triple-quoted-string\": {\n            pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n            greedy: true,\n            alias: \"string\",\n        },\n        string: {\n            pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n            greedy: true,\n        },\n        keyword:\n            /<-|=>|\\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\\b/,\n        number: /\\b0x(?:[\\da-f]*\\.)?[\\da-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e\\d+)?[dfl]?/i,\n        builtin: /\\b(?:String|Int|Long|Short|Byte|Boolean|Double|Float|Char|Any|AnyRef|AnyVal|Unit|Nothing)\\b/,\n        symbol: /'[^\\d\\s\\\\]\\w*/,\n    });\n    delete Prism.languages.scala[\"class-name\"];\n    delete Prism.languages.scala[\"function\"];\n};\n","export const registerLanguage = (Prism) => {\n    // Copied from https://raw.githubusercontent.com/PrismJS/prism/master/components/prism-ruby.js\n    (function (Prism) {\n        Prism.languages.ruby = Prism.languages.extend(\"clike\", {\n            comment: [\n                /#.*/,\n                {\n                    pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n                    greedy: true,\n                },\n            ],\n            \"class-name\": {\n                pattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n                lookbehind: true,\n                inside: {\n                    punctuation: /[.\\\\]/,\n                },\n            },\n            keyword:\n                /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/,\n        });\n\n        var interpolation = {\n            pattern: /#\\{[^}]+\\}/,\n            inside: {\n                delimiter: {\n                    pattern: /^#\\{|\\}$/,\n                    alias: \"tag\",\n                },\n                rest: Prism.languages.ruby,\n            },\n        };\n\n        delete Prism.languages.ruby.function;\n\n        Prism.languages.insertBefore(\"ruby\", \"keyword\", {\n            regex: [\n                {\n                    pattern: RegExp(\n                        /%r/.source +\n                            \"(?:\" +\n                            [\n                                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n                                /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source,\n                                // Here we need to specifically allow interpolation\n                                /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,\n                                /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,\n                                /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source,\n                            ].join(\"|\") +\n                            \")\" +\n                            /[egimnosux]{0,6}/.source\n                    ),\n                    greedy: true,\n                    inside: {\n                        interpolation: interpolation,\n                    },\n                },\n                {\n                    pattern:\n                        /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[egimnosux]{0,6}(?=\\s*(?:$|[\\r\\n,.;})#]))/,\n                    lookbehind: true,\n                    greedy: true,\n                    inside: {\n                        interpolation: interpolation,\n                    },\n                },\n            ],\n            variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n            symbol: {\n                pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n                lookbehind: true,\n            },\n            \"method-definition\": {\n                pattern: /(\\bdef\\s+)[\\w.]+/,\n                lookbehind: true,\n                inside: {\n                    function: /\\w+$/,\n                    rest: Prism.languages.ruby,\n                },\n            },\n        });\n\n        Prism.languages.insertBefore(\"ruby\", \"number\", {\n            builtin:\n                /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n            constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/,\n        });\n\n        Prism.languages.ruby.string = [\n            {\n                pattern: RegExp(\n                    /%[qQiIwWxs]?/.source +\n                        \"(?:\" +\n                        [\n                            /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n                            /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source,\n                            // Here we need to specifically allow interpolation\n                            /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,\n                            /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,\n                            /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source,\n                        ].join(\"|\") +\n                        \")\"\n                ),\n                greedy: true,\n                inside: {\n                    interpolation: interpolation,\n                },\n            },\n            {\n                pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n                greedy: true,\n                inside: {\n                    interpolation: interpolation,\n                },\n            },\n            {\n                pattern: /<<[-~]?([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n                alias: \"heredoc-string\",\n                greedy: true,\n                inside: {\n                    delimiter: {\n                        pattern: /^<<[-~]?[a-z_]\\w*|[a-z_]\\w*$/i,\n                        alias: \"symbol\",\n                        inside: {\n                            punctuation: /^<<[-~]?/,\n                        },\n                    },\n                    interpolation: interpolation,\n                },\n            },\n            {\n                pattern: /<<[-~]?'([a-z_]\\w*)'[\\r\\n](?:.*[\\r\\n])*?[\\t ]*\\1/i,\n                alias: \"heredoc-string\",\n                greedy: true,\n                inside: {\n                    delimiter: {\n                        pattern: /^<<[-~]?'[a-z_]\\w*'|[a-z_]\\w*$/i,\n                        alias: \"symbol\",\n                        inside: {\n                            punctuation: /^<<[-~]?'|'$/,\n                        },\n                    },\n                },\n            },\n        ];\n\n        Prism.languages.rb = Prism.languages.ruby;\n    })(Prism);\n};\n","export const registerLanguage = (Prism) => {\n    // Copied from https://raw.githubusercontent.com/PrismJS/prism/master/components/prism-http.js\n    (function (Prism) {\n        Prism.languages.http = {\n            \"request-line\": {\n                pattern:\n                    /^(?:GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH|PRI|SEARCH)\\s(?:https?:\\/\\/|\\/)\\S*\\sHTTP\\/[0-9.]+/m,\n                inside: {\n                    // HTTP Method\n                    method: {\n                        pattern: /^[A-Z]+\\b/,\n                        alias: \"property\",\n                    },\n                    // Request Target e.g. http://example.com, /path/to/file\n                    \"request-target\": {\n                        pattern: /^(\\s)(?:https?:\\/\\/|\\/)\\S*(?=\\s)/,\n                        lookbehind: true,\n                        alias: \"url\",\n                        inside: Prism.languages.uri,\n                    },\n                    // HTTP Version\n                    \"http-version\": {\n                        pattern: /^(\\s)HTTP\\/[0-9.]+/,\n                        lookbehind: true,\n                        alias: \"property\",\n                    },\n                },\n            },\n            \"response-status\": {\n                pattern: /^HTTP\\/[0-9.]+ \\d+ .+/m,\n                inside: {\n                    // HTTP Version\n                    \"http-version\": {\n                        pattern: /^HTTP\\/[0-9.]+/,\n                        alias: \"property\",\n                    },\n                    // Status Code\n                    \"status-code\": {\n                        pattern: /^(\\s)\\d+(?=\\s)/,\n                        lookbehind: true,\n                        alias: \"number\",\n                    },\n                    // Reason Phrase\n                    \"reason-phrase\": {\n                        pattern: /^(\\s).+/,\n                        lookbehind: true,\n                        alias: \"string\",\n                    },\n                },\n            },\n            // HTTP header name\n            \"header-name\": {\n                pattern: /^[\\w-]+:(?=.)/m,\n                alias: \"keyword\",\n            },\n        };\n\n        // Create a mapping of Content-Type headers to language definitions\n        var langs = Prism.languages;\n        var httpLanguages = {\n            \"application/javascript\": langs.javascript,\n            \"application/json\": langs.json || langs.javascript,\n            \"application/xml\": langs.xml,\n            \"text/xml\": langs.xml,\n            \"text/html\": langs.html,\n            \"text/css\": langs.css,\n        };\n\n        // Declare which types can also be suffixes\n        var suffixTypes = {\n            \"application/json\": true,\n            \"application/xml\": true,\n        };\n\n        /**\n         * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n         *\n         * @param {string} contentType\n         * @returns {string}\n         */\n        function getSuffixPattern(contentType) {\n            var suffix = contentType.replace(/^[a-z]+\\//, \"\");\n            var suffixPattern = \"\\\\w+/(?:[\\\\w.-]+\\\\+)+\" + suffix + \"(?![+\\\\w.-])\";\n            return \"(?:\" + contentType + \"|\" + suffixPattern + \")\";\n        }\n\n        // Insert each content type parser that has its associated language\n        // currently loaded.\n        var options;\n        for (var contentType in httpLanguages) {\n            if (httpLanguages[contentType]) {\n                options = options || {};\n\n                var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n                options[contentType.replace(/\\//g, \"-\")] = {\n                    pattern: RegExp(\n                        \"(content-type:\\\\s*\" + pattern + \"(?:(?:\\\\r\\\\n?|\\\\n).+)*)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*\",\n                        \"i\"\n                    ),\n                    lookbehind: true,\n                    inside: httpLanguages[contentType],\n                };\n            }\n        }\n        if (options) {\n            Prism.languages.insertBefore(\"http\", \"header-name\", options);\n        }\n    })(Prism);\n};\n"],"names":["Prism","lang","uniqueId","plainTextGrammar","_","util","encode","tokens","Token","type","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","objId","obj","defineProperty","value","clone","deepClone","visited","id","key","hasOwnProperty","forEach","v","i","getLanguage","element","m","exec","className","toLowerCase","parentElement","setLanguage","language","RegExp","classList","add","isActive","defaultActivation","no","contains","languages","plain","plaintext","text","txt","extend","redef","insertBefore","inside","before","insert","root","grammar","ret","token","newToken","old","DFS","this","callback","property","propertyType","plugins","highlight","env","code","hooks","run","tokenize","stringify","rest","tokenList","LinkedList","addAfter","head","matchGrammar","list","array","node","next","tail","push","toArray","all","name","callbacks","length","matchedStr","matchPattern","pattern","pos","lookbehind","lastIndex","match","lookbehindLength","index","startNode","startPos","rematch","patterns","j","cause","patternObj","greedy","global","flags","source","currentNode","reach","str","removeCount","from","to","p","k","matchStr","after","removeFrom","prev","removeRange","nestedRematch","newNode","count","s","e","tag","classes","attributes","aliases","apply","join","prism","default","markup","comment","prolog","doctype","string","punctuation","cdata","namespace","entity","tagName","includedCdataInside","def","attrName","html","mathml","svg","xml","ssml","atom","rss","envVars","commandAfterHeredoc","insideString","bash","environment","variable","number","operator","shebang","function","keyword","builtin","boolean","toBeCopied","shell","clike","c","char","macro","directive","expression","constant","modName","cpp","module","generic","css","atrule","rule","url","selector","important","addInlined","addAttribute","selectorInside","class","attribute","combinator","unit","hexcode","color","javascript","regex","parameter","hashbang","interpolation","js","coffeescript","delimiter","script","coffee","anchorOrAlias","properties","plainKey","createValuePattern","yaml","scalar","datetime","null","yml","inner","createInline","tableCell","tableRow","tableLine","markdown","blockquote","table","title","hr","bold","italic","strike","walkTokens","l","codeLang","codeBlock","cls","tagPattern","parseInt","Number","fromCodePoint","known","KNOWN_ENTITY_NAMES","autoloader","Date","valueOf","Math","floor","random","loadLanguages","ele","document","getElementById","innerHTML","textContent","amp","lt","gt","quot","String","fromCharCode","md","graphql","description","fragment","object","validTokens","filter","currentIndex","startToken","inputVariables","isTokenType","getToken","definitionEnd","findClosingBracket","t","addAlias","mutationEnd","varToken","indexOf","offset","types","open","close","stackHeight","test","sql","identifier","templateString","templateLiteralPattern","interpolationObject","interpolationPunctuationObject","interpolationPattern","createTemplate","getPlaceholder","counter","toUpperCase","tokenizeWithHooks","tokenizeInterpolationExpression","tempGrammar","args","splice","tokenizeEmbedded","_tokens","placeholderCounter","placeholderMap","embeddedTokens","placeholder","interpolationExpression","placeholders","keys","substring","middle","replacement","afterTokens","concat","Boolean","supportedLanguages","typescript","ts","jsx","tsx","stringContent","findTemplateStrings","embedded","typeInside","decorator","at","withId","method","imports","exports","unshift","spread","arrow","dom","console","maybeClassNameTokens","space","braces","re","stringifyToken","openedTags","notTagNorBrace","pop","openedBraces","plainText","diff","coord","PREFIXES","unchanged","prefix","line","git","deleted","inserted","command","go","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","tokenizePlaceholders","handlebars","block","brackets","hbs","json","webmanifest","less","makefile","target","objectivec","objc","ocaml","label","variant","python","py","reason","constructor","sass","scss","parent","statement","func","stylus","wasm","Prism$1","_defineProperty","enumerable","configurable","writable","_extends","assign","arguments","newlineRe","normalizeEmptyLines","empty","appendTypes","typesSize","themeToDict","theme","base","create","themeDict","styles","reduce","acc","themeEntry","style","includes","accStyle","backgroundColor","objectWithoutProperties","exclude","Highlight","Component","this$1","len","props","undefined","prevTheme","prevLanguage","ref","output","getThemeDict","display","baseStyle","typeStyles","children","getStyleForToken","__proto__","render","typeArrStack","tokenArrStack","tokenArrIndexStack","tokenArrSizeStack","stackIndex","currentLine","splitByNewlines","split","newlineCount","i$1","normalizeTokens","getLineProps","getTokenProps","PrismReactRenderer","keywords","classNamePrefix","java","annotation","generics","registerJava","replacements","nested","depthLog2","keywordKinds","keywordsToPattern","words","trim","typeDeclarationKeywords","nonTypeKeywords","nonContextualKeywords","nestedRound","genericName","typeExpressionWithoutTuple","tupleElement","tuple","typeExpression","character","regularString","verbatimString","csharp","range","preprocessor","regularStringOrCharacter","regularStringCharacterOrComment","roundExpression","attrTarget","attr","formatString","mInterpolationRound","mInterpolation","sInterpolationRound","sInterpolation","createInterpolationInside","interpolationRound","dotnet","cs","registerCSharp","scala","symbol","registerScala","ruby","rb","registerRuby","http","uri","options","langs","httpLanguages","suffixTypes","getSuffixPattern","contentType","suffix","registerHttp","CodeBlock","React","forwardRef","_a","__rest","createElement","Element","as","CodeStyled","JSON"],"mappings":"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"}
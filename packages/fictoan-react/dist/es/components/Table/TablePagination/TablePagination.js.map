{"version":3,"file":"TablePagination.js","sources":["../../../../../src/components/Table/TablePagination/TablePagination.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { ReactComponent as PreviousButton } from \"../../../assets/icons/left.svg\";\nimport { ReactComponent as NextButton } from \"../../../assets/icons/right.svg\";\nimport { ReactComponent as FirstPageButton } from \"../../../assets/icons/left.svg\";\n\nimport { CommonAndHTMLProps } from \"../../Element/constants\";\nimport { Element } from \"../../Element\";\nimport { Heading } from \"../../Typography\";\nimport { Text } from \"../../Typography\";\nimport { TablePaginationStyled } from \"./TablePagination.styled\";\nimport { Spinner } from \"../../Spinner\";\n\n// prettier-ignore\nexport interface TablePaginationCustomProps {\n    pageIndex         : number;\n    rangeStart        : number;\n    rangeEnd          : number;\n    hasPreviousPage   : boolean;\n    hasNextPage       : boolean;\n    totalRecords    ? : number;\n    isLoading       ? : boolean;\n    loadingText     ? : string;\n    emptyText       ? : string;\n    onPageChange      : (page: number) => void;\n}\n\nexport type TablePaginationElementType = HTMLElement;\nexport type TablePaginationProps = Omit<\n    CommonAndHTMLProps<TablePaginationElementType>,\n    keyof TablePaginationCustomProps\n> &\n    TablePaginationCustomProps;\n\nexport const TablePagination = React.forwardRef(\n    (\n        {\n            pageIndex,\n            rangeStart,\n            rangeEnd,\n            hasPreviousPage,\n            hasNextPage,\n            totalRecords,\n            isLoading,\n            loadingText,\n            emptyText,\n            onPageChange: handlePageChange,\n            ...props\n        }: TablePaginationProps,\n        ref: React.Ref<TablePaginationElementType>\n    ) => {\n        return (\n            <Element<TablePaginationElementType> as={TablePaginationStyled} ref={ref} {...props}>\n                <Element as=\"div\" className=\"vertically-centre-items\" marginBottom=\"none\">\n                    {totalRecords === 0 ? (\n                        <Heading as=\"h6\" marginRight=\"nano\">\n                            {emptyText ? emptyText : \"No records\"}\n                        </Heading>\n                    ) : (\n                        <Heading as=\"h6\" marginRight=\"nano\">\n                            {rangeStart} &ndash; {rangeEnd}\n                            {totalRecords ? ` of ${totalRecords}` : ``}\n                        </Heading>\n                    )}\n\n                    <Element as=\"div\" classNames={[\"nav-icon\", `${pageIndex === 0 && `is-inactive`}`]}>\n                        <FirstPageButton onClick={() => pageIndex !== 0 && handlePageChange(0)} />\n                        <span>First page</span>\n                    </Element>\n\n                    <Element as=\"div\" classNames={[\"nav-icon\", `${!hasPreviousPage && `is-inactive`}`]}>\n                        <PreviousButton onClick={() => hasPreviousPage && handlePageChange(pageIndex - 1)} />\n                        <span>Previous</span>\n                    </Element>\n\n                    <Text marginLeft=\"nano\" marginRight=\"nano\">\n                        {pageIndex + 1}\n                    </Text>\n\n                    <Element as=\"div\" classNames={[\"nav-icon\", `${!hasNextPage && `is-inactive`}`]}>\n                        <NextButton onClick={() => hasNextPage && handlePageChange(pageIndex + 1)} />\n                        <span>Next</span>\n                    </Element>\n\n                    {isLoading && (\n                        <Element as=\"div\" marginLeft=\"nano\" className=\"vertically-centre-items\">\n                            <Spinner />\n                            {loadingText && (\n                                <Text size=\"small\" marginLeft=\"nano\">\n                                    {loadingText}\n                                </Text>\n                            )}\n                        </Element>\n                    )}\n                </Element>\n            </Element>\n        );\n    }\n);\n"],"names":["TablePagination","React","forwardRef","_a","ref","pageIndex","rangeStart","rangeEnd","hasPreviousPage","hasNextPage","totalRecords","isLoading","loadingText","emptyText","onPageChange","handlePageChange","props","__rest","createElement","Element","Object","assign","as","TablePaginationStyled","className","marginBottom","Heading","marginRight","classNames","FirstPageButton","onClick","PreviousButton","Text","marginLeft","NextButton","Spinner","size"],"mappings":";;kKAkCO,MAAMA,eAAkBC,EAAMC,YACjC,CACIC,EAaAC,SAbAC,UACIA,EAASC,WACTA,EAAUC,SACVA,EAAQC,gBACRA,EAAeC,YACfA,EAAWC,aACXA,EAAYC,UACZA,EAASC,YACTA,EAAWC,UACXA,EACAC,aAAcC,GAAgBZ,EAC3Ba,EAXPC,EAAAd,EAAA,CAAA,YAAA,aAAA,WAAA,kBAAA,cAAA,eAAA,YAAA,cAAA,YAAA;AAeA,OACIF,EAAAiB,cAACC,EAAOC,OAAAC,OAAA,CAA6BC,GAAIC,EAAuBnB,IAAKA,GAASY,gBAC1Ef,EAAAiB,cAACC,EAAO,CAACG,GAAG,MAAME,UAAU,0BAA0BC,aAAa,QAC7C,IAAjBf,eACGT,gBAACyB,EAAO,CAACJ,GAAG,KAAKK,YAAY,QACxBd,GAAwB,2BAG7BZ,EAACiB,cAAAQ,GAAQJ,GAAG,KAAKK,YAAY,QACxBrB,QAAqBC,EACrBG,EAAsB,OAAAA,IAAmB,iBAIlDT,EAAAiB,cAACC,EAAQ,CAAAG,GAAG,MAAMM,WAAY,CAAC,cAA6B,IAAdvB,GAAmB,+BAC7DJ,EAAAiB,cAACW,EAAe,CAACC,QAAS,IAAoB,IAAdzB,GAAmBU,EAAiB,kBACpEd,EAAAiB,cAAA,OAAA,KAAA,4BAGJjB,EAAAiB,cAACC,EAAQ,CAAAG,GAAG,MAAMM,WAAY,CAAC,WAAe,IAACpB,GAAmB,+BAC9DP,EAAAiB,cAACa,EAAc,CAACD,QAAS,IAAMtB,GAAmBO,EAAiBV,EAAY,kBAC/EJ,EAAAiB,cAAA,OAAA,KAAA,0BAGJjB,EAAAiB,cAACc,EAAI,CAACC,WAAW,OAAON,YAAY,QAC/BtB,EAAY,gBAGjBJ,EAAAiB,cAACC,EAAQ,CAAAG,GAAG,MAAMM,WAAY,CAAC,WAAe,IAACnB,GAAe,+BAC1DR,EAAAiB,cAACgB,EAAU,CAACJ,QAAS,IAAMrB,GAAeM,EAAiBV,EAAY,kBACvEJ,EAAAiB,cAAA,OAAA,KAAA,SAGHP,gBACGV,EAACiB,cAAAC,GAAQG,GAAG,MAAMW,WAAW,OAAOT,UAAU,wCAC1CvB,EAAAiB,cAACiB,EAAU,MACVvB,gBACGX,EAACiB,cAAAc,GAAKI,KAAK,QAAQH,WAAW,QACzBrB,KAMf"}
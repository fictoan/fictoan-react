{"version":3,"file":"PinInputField.js","sources":["../../../../src/components/PinInputField/PinInputField.tsx"],"sourcesContent":["import React, { createRef, useCallback, useEffect, useState } from \"react\";\n\nimport { Element } from \"../Element/Element\";\nimport { CommonAndHTMLProps, SpacingTypes } from \"../Element/constants\";\nimport { InputField } from \"../Form/InputField/InputField\";\n\nimport { PinInputStyled } from \"./PinInputField.styled\";\n\n// prettier-ignore\ntype PinInputFieldCustomProps = {\n    numberOfFields   : number;\n    onChange       ? : (value : string) => void;\n    type           ? : \"alphanumeric\" | \"number\";\n    mask           ? : boolean;\n    otp            ? : boolean;\n    autoFocus      ? : boolean;\n    spacing        ? : SpacingTypes;\n};\n\nexport type PinInputFieldElementType = HTMLDivElement;\nexport type PinInputFieldProps = Omit<CommonAndHTMLProps<PinInputFieldElementType>, keyof PinInputFieldCustomProps> &\n    PinInputFieldCustomProps;\n\nfunction validate(value: string, type: \"alphanumeric\" | \"number\") {\n    const NUMERIC_REGEX = /^[0-9]+$/;\n    const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n    const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n    return regex.test(value);\n}\n\nexport const PinInputField = React.forwardRef(\n    (\n        {\n            numberOfFields: length,\n            onChange,\n            type = \"number\",\n            mask = false,\n            otp = false,\n            autoFocus = false,\n            spacing = \"small\",\n        }: PinInputFieldProps,\n        ref: React.Ref<PinInputFieldElementType>\n    ) => {\n        const [inputRefs, setInputRefs] = useState<React.RefObject<HTMLInputElement>[]>([]);\n        const [values, setValues] = useState<string[]>([]);\n        const [moveFocus, setMoveFocus] = useState<boolean>(true);\n        const [focusedIndex, setFocusedIndex] = useState<number>(-1);\n\n        const focus = useCallback(\n            (index: number) => {\n                const ref = inputRefs[index];\n                ref?.current?.focus();\n            },\n            [inputRefs]\n        );\n\n        useEffect(() => {\n            setInputRefs((inputRefs) => {\n                const refs = Array(length)\n                    .fill(0)\n                    .map((_, i) => {\n                        const ref = inputRefs[i] || createRef();\n                        if (autoFocus && i === 0) {\n                            ref.current?.focus();\n                        }\n                        return ref;\n                    });\n                return refs;\n            });\n        }, [length, autoFocus]);\n\n        const focusNext = useCallback(\n            (index: number) => {\n                if (!moveFocus) return;\n                const next = index + 1 < length ? index + 1 : null;\n                if (next) {\n                    focus(next);\n                }\n            },\n            [focus, length, moveFocus]\n        );\n\n        const setValue = useCallback(\n            (value: string, index: number) => {\n                const nextValues = [...values];\n                nextValues[index] = value;\n                setValues(nextValues);\n                onChange?.(nextValues.join(\"\"));\n\n                const isComplete =\n                    value !== \"\" &&\n                    nextValues.length === length &&\n                    nextValues.every((inputValue) => inputValue != null && inputValue !== \"\");\n\n                if (!isComplete) {\n                    focusNext(index);\n                }\n            },\n            [focusNext, length, onChange, values]\n        );\n\n        const getNextValue = useCallback((value: string, eventValue: string) => {\n            let nextValue = eventValue;\n            if (value?.length > 0) {\n                if (value[0] === eventValue.charAt(0)) {\n                    nextValue = eventValue.charAt(1);\n                } else if (value[0] === eventValue.charAt(1)) {\n                    nextValue = eventValue.charAt(0);\n                }\n            }\n            return nextValue;\n        }, []);\n\n        const handleInputChange = (event: React.FormEvent<HTMLInputElement>, i: number) => {\n            const eventValue = event.currentTarget.value;\n            const currentValue = values[i];\n            const nextValue = getNextValue(currentValue, eventValue);\n\n            if (nextValue === \"\") {\n                setValue(\"\", i);\n                return;\n            }\n\n            if (eventValue.length > 1 && i < length - 1) {\n                if (validate(eventValue, type)) {\n                    const nextValue = eventValue.split(\"\").filter((_, index) => index < length);\n                    setValues(nextValue);\n                    focus(i + nextValue.length < length ? i + nextValue.length : length - 1);\n                    onChange?.(nextValue.join(\"\"));\n                }\n            } else {\n                if (validate(nextValue, type)) {\n                    setValue(nextValue, i);\n                }\n                setMoveFocus(true);\n            }\n        };\n\n        const onKeyDown = (event: React.KeyboardEvent, i: number) => {\n            if (event.key === \"Backspace\") {\n                if ((event.target as HTMLInputElement).value === \"\") {\n                    if (i > 0) {\n                        const newIndex = i - 1;\n                        setValue(\"\", newIndex);\n                        focus(newIndex);\n                        setMoveFocus(true);\n                    }\n                } else {\n                    setMoveFocus(false);\n                }\n            } else if (event.key === \"Escape\") {\n                inputRefs[i].current?.blur();\n                onBlur();\n            } else if (event.key === \"ArrowRight\") {\n                if (i < length - 1) {\n                    focus(i + 1);\n                }\n            } else if (event.key === \"ArrowLeft\") {\n                if (i > 0) {\n                    focus(i - 1);\n                }\n            }\n        };\n\n        const onFocus = (e: React.FocusEvent<HTMLInputElement>, i: number) => {\n            setFocusedIndex(i);\n            setTimeout(() => {\n                // https://github.com/facebook/react/issues/6483\n                e.target.setSelectionRange(e.target.value.length, e.target.value.length);\n            }, 0);\n        };\n\n        const onBlur = () => {\n            setFocusedIndex(-1);\n        };\n\n        let classNames = [];\n\n        if (spacing) {\n            classNames.push(`spacing-${spacing}`);\n        }\n\n        return (\n            <Element<PinInputFieldElementType> as={PinInputStyled} classNames={classNames} ref={ref}>\n                {[...Array(length)].map((_, i) => (\n                    <InputField\n                        key={i}\n                        className=\"pin-input-field\"\n                        ref={inputRefs[i]}\n                        type={mask ? \"password\" : type === \"number\" ? \"tel\" : \"text\"}\n                        inputMode={type === \"number\" ? \"numeric\" : \"text\"}\n                        onChange={(e) => handleInputChange(e, i)}\n                        onKeyDown={(e) => onKeyDown(e, i)}\n                        onFocus={(e) => onFocus(e, i)}\n                        onBlur={onBlur}\n                        placeholder={focusedIndex !== i ? `\\u2981` : undefined}\n                        autoComplete={otp ? \"one-time-code\" : \"off\"}\n                        value={values[i] || \"\"}\n                        autoFocus={autoFocus && i === 0}\n                    />\n                ))}\n            </Element>\n        );\n    }\n);\n"],"names":["validate","value","type","test","PinInputField","React","forwardRef","numberOfFields","length","onChange","mask","otp","autoFocus","spacing","ref","inputRefs","setInputRefs","useState","values","setValues","moveFocus","setMoveFocus","focusedIndex","setFocusedIndex","focus","useCallback","index","_a","current","useEffect","refs","Array","fill","map","_","i","createRef","focusNext","next","setValue","nextValues","join","every","inputValue","getNextValue","eventValue","nextValue","charAt","onBlur","classNames","push","createElement","Element","as","PinInputStyled","InputField","key","className","inputMode","e","event","currentTarget","currentValue","split","filter","handleInputChange","onKeyDown","target","newIndex","blur","onFocus","setTimeout","setSelectionRange","placeholder","undefined","autoComplete"],"mappings":"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"}
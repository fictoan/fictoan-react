{"version":3,"file":"ToastItem.js","sources":["../../../../../src/components/Toast/ToastItem/ToastItem.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Element } from \"../../Element/Element\";\nimport { CommonAndHTMLProps } from \"../../Element/constants\";\n\nimport { ToastItemStyled } from \"./ToastItem.styled\";\n\n// prettier-ignore\nexport interface ToastItemCustomProps {\n    show            ? : boolean;\n    showFor         ? : number;\n    onCloseCallback ? : () => void;\n}\n\nexport type ToastItemElementType = HTMLDivElement;\nexport type ToastItemProps = Omit<CommonAndHTMLProps<ToastItemElementType>, keyof ToastItemCustomProps> &\n    ToastItemCustomProps;\n\nexport const ToastItem = React.forwardRef(\n    ({ show, children, showFor, onCloseCallback, ...props }: ToastItemProps, ref: React.Ref<ToastItemElementType>) => {\n        let classNames: string[] = [];\n        const [isVisible, setIsVisible] = useState<boolean>(show);\n\n        useEffect(() => {\n            if (show) {\n                setIsVisible(true);\n            }\n\n            const timer = show\n                ? setTimeout(() => {\n                      onCloseCallback();\n                  }, showFor ?? 4000)\n                : undefined;\n\n            return () => {\n                clearTimeout(timer);\n            };\n        }, [show]);\n\n        const onTransitionEnd = () => {\n            if (!show) setIsVisible(false);\n        };\n\n        return (\n            isVisible && (\n                <Element<ToastItemElementType>\n                    as={ToastItemStyled}\n                    classNames={[...classNames, show ? \"visible\" : \"\"]}\n                    onTransitionEnd={onTransitionEnd}\n                    padding=\"nano\"\n                    {...props}\n                >\n                    {children}\n                </Element>\n            )\n        );\n    }\n);\n"],"names":["ToastItem","React","forwardRef","_a","ref","show","children","showFor","onCloseCallback","props","__rest","isVisible","setIsVisible","useState","useEffect","timer","setTimeout","undefined","clearTimeout","createElement","Element","as","ToastItemStyled","classNames","onTransitionEnd","padding"],"mappings":"kxBAkBO,MAAMA,EAAYC,EAAAA,QAAMC,YAC3B,CAACC,EAAwEC,KAAxE,IAAAC,KAAEA,EAAIC,SAAEA,EAAQC,QAAEA,EAAOC,gBAAEA,GAAeL,EAAKM,EAA/CC,EAAAA,OAAAP,EAAA,CAAA,OAAA,WAAA,UAAA,oBAEG,MAAOQ,EAAWC,GAAgBC,EAAQA,SAAUR,GAEpDS,EAAAA,WAAU,KACFT,GACAO,GAAa,GAGjB,MAAMG,EAAQV,EACRW,YAAW,KACPR,GAAiB,GAClBD,QAAAA,EAAW,UACdU,EAEN,MAAO,KACHC,aAAaH,EAAM,CACtB,GACF,CAACV,IAMJ,OACIM,GACIV,EAAAA,QAACkB,cAAAC,yBACGC,GAAIC,kBACJC,WAAY,CAAgBlB,EAAO,UAAY,IAC/CmB,gBATY,KACfnB,GAAMO,GAAa,EAAM,EAStBa,QAAQ,QACJhB,GAEHH,EAER"}